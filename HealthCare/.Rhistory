#percentage of complaints resolved through internet and calls
length(dataset['TicketStatus']=="Closed" & (dataset['Received.Via']=="Internet"|dataset['Received.Via']=="Customer Care Call"))
#percentage of complaints resolved through internet and calls
comp=(dataset['TicketStatus']=="Closed" & (dataset['Received.Via']=="Internet"|dataset['Received.Via']=="Customer Care Call"))
View(comp)
len(c[c==TRUE])
length(c[c==TRUE])
comp
class(comp)
View(comp)
comp=as.list(comp)
View(comp)
length(comp[comp==TRUE])
length(comp[comp==FALSE)
length(comp[comp==FALSE])
1707+517
percentage_of_resolved=length(comp[comp==TRUE])/length(comp)
percentage_of_resolved=length(comp[comp==TRUE])/length(comp)*100
state_withMaxComplaints=df$State[which(df$n==max(df$n))]
#MAX per Month complaints
max(permonth$complaints)
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
#MAX Per day complaints
max(perday$complaints)
unresolvedState=dataset %>% group_by(dataset['State'],dataset["TicketStatus"]=="Open") %>% tally()
View(unresolvedState)
View(ByState)
unresolvedState=dataset %>% group_by(dataset['State'],dataset["TicketStatus"]=="Open") %>% count()
View(unresolvedState)
tally()
View(ByState)
filter(ByState,TicketStatus="Open")
filter(ByState,TicketStatus=="Open")
unresolvedState=filter(ByState,TicketStatus=="Open")
View(unresolvedState)
sum(unresolvedState$n)
factor(dataset$Received.Via)
levels(dataset$Received.Via)
levels(factor(dataset$Received.Via))
sum(unresolvedState$n)
unresolvedState=filter(ByState,TicketStatus=="Open")
sum(unresolvedState$n)
resolved_count=sum(ByState$n)-sum(unresolvedState$n)
percentage_of_resolved=resolved_count/sum(ByState$n)*100
percentage_of_resolved
unresolvedStates=filter(ByState,TicketStatus=="Open")
dataset=read.csv('D:/Simplilearn/DS with R/Comcast Telecom Complaints data.csv')
#include necessary libraries
library(ggplot2)
library(dplyr)
#Extract date column and preprocess
dates=dataset$Date
class(dates)
#Getting the date format correctly
dates=gsub("/","-",dates)
#Transform to Date type
dates=as.Date(dates,"%d-%m-%Y")
#Verify the orignal date with transformed date
head(dataset$Date)
dates[1:6]
#Updating the date column with actual date
dataset$Date=dates
#Unique days from the dataset
mydates=as.factor(dataset$Date)
#filtering records per day
dataset$Date=as.character(dataset$Date)
perday =dataset %>% group_by(dataset['Date']) %>% tally()
perday=as.data.frame(perday)
perday$complaints=perday$n
#removing n column and keeping complaints column
perday=perday[,-2]
#permonth spilts
library(lubridate)
dataset$Date=dates
permonth =dataset %>% group_by(month=floor_date(Date, "month")) %>% tally()
permonth=as.data.frame(permonth)
permonth$complaints=permonth$n
permonth=permonth[,-2]
#plot the trend of complaints on monthly basis
ggplot(data = permonth, aes(x = month, y = complaints)) +
geom_bar(stat = "identity",fill="red")+
labs(x = "Month",
y = "No.of complaints",
title = "Trend chart for a monthly complaints",
subtitle = "Year 2015")
#MAX per Month complaints
max(permonth$complaints)
#plot the trend of complaints on daily basis
perday$Date=as.Date(perday$Date)
class(perday$d)
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
#MAX Per day complaints
max(perday$complaints)
#creating a new categorical variable
dataset$TicketStatus[which(dataset["Status"]=="Open" | dataset["Status"]=="Pending")]="Open"
dataset$TicketStatus[which(dataset["Status"]=="Closed" | dataset["Status"]=="Solved")]="Closed"
#States spilt
ByState =dataset %>% group_by(dataset['State'],dataset["TicketStatus"]) %>% tally()
#state wise complaints in stacked bar chart
ggplot(ByState,aes(fill=TicketStatus,y=n,x=State))+geom_bar(position = "stack",stat = "identity",width = 0.8)+
labs(title = "State wise complaints with status") +
theme(axis.text.x = element_text(angle = 90)) +
ylab(label = "Complaints") +
scale_fill_manual("legend", values = c("Closed" = "green", "Open"="red"))
#State with max complaints
df=as.data.frame(dataset %>% group_by(dataset['State']) %>% tally())
state_withMaxComplaints=df$State[which(df$n==max(df$n))]
#percentage of complaints resolved through internet and calls
levels(factor(dataset$Received.Via))
unresolvedStates=filter(ByState,TicketStatus=="Open")
resolved_count=sum(ByState$n)-sum(unresolvedState$n)
percentage_of_resolved=resolved_count/sum(ByState$n)*100
resolved_count=sum(ByState$n)-sum(unresolvedStates$n)
percentage_of_resolved=resolved_count/sum(ByState$n)*100
View(unresolvedStates)
#state with high unresolved tickets
state_withHighestUnresolved=unresolvedStates$State[which(unresolvedStates$n==max(unresolvedStates$n))]
levles(factor(dataset$Customer.Complaint))
levels(factor(dataset$Customer.Complaint))
as.data.frame(dataset %>% group_by(dataset['Received.via']) %>% tally())
as.data.frame(dataset %>% group_by(dataset['Received.via']) %>% tally())
as.data.frame(dataset %>% group_by(dataset['Received.Via']) %>% tally())
as.data.frame(dataset %>% group_by(dataset['Received.Via'],dataset['TicketStatus']) %>% tally())
data_for_ticket_status=as.data.frame(dataset %>% group_by(dataset['Received.Via'],dataset['TicketStatus']) %>% tally())
filter(data_for_ticket_status,TicketStatus=="Open")
cust_call_ticket=sum(data_for_ticket_status$n)
864+255
864*255
255/1119
View(unresolvedStates)
#Set the working directory
setwd(choose.dir())
#Import the dataset
dataset=read.csv('D:/Simplilearn/DS with R/Comcast Telecom Complaints data.csv')
#include necessary libraries
library(ggplot2)
library(dplyr)
#Extract date column and preprocess
dates=dataset$Date
class(dates)
#Getting the date format correctly
dates=gsub("/","-",dates)
#Transform to Date type
dates=as.Date(dates,"%d-%m-%Y")
#Verify the orignal date with transformed date
head(dataset$Date)
dates[1:6]
#Updating the date column with actual date
dataset$Date=dates
#Unique days from the dataset
mydates=as.factor(dataset$Date)
#filtering records per day
dataset$Date=as.character(dataset$Date)
perday =dataset %>% group_by(dataset['Date']) %>% tally()
perday=as.data.frame(perday)
perday$complaints=perday$n
#removing n column and keeping complaints column
perday=perday[,-2]
#permonth spilts
library(lubridate)
dataset$Date=dates
permonth =dataset %>% group_by(month=floor_date(Date, "month")) %>% tally()
permonth=as.data.frame(permonth)
permonth$complaints=permonth$n
permonth=permonth[,-2]
#plot the trend of complaints on monthly basis
ggplot(data = permonth, aes(x = month, y = complaints)) +
geom_bar(stat = "identity",fill="red")+
labs(x = "Month",
y = "No.of complaints",
title = "Trend chart for a monthly complaints",
subtitle = "Year 2015")
#MAX per Month complaints
max(permonth$complaints)
#plot the trend of complaints on daily basis
perday$Date=as.Date(perday$Date)
class(perday$d)
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
#MAX Per day complaints
max(perday$complaints)
#creating a new categorical variable
dataset$TicketStatus[which(dataset["Status"]=="Open" | dataset["Status"]=="Pending")]="Open"
dataset$TicketStatus[which(dataset["Status"]=="Closed" | dataset["Status"]=="Solved")]="Closed"
#States spilt
ByState =dataset %>% group_by(dataset['State'],dataset["TicketStatus"]) %>% tally()
#state wise complaints in stacked bar chart
ggplot(ByState,aes(fill=TicketStatus,y=n,x=State))+geom_bar(position = "stack",stat = "identity",width = 0.8)+
labs(title = "State wise complaints with status") +
theme(axis.text.x = element_text(angle = 90)) +
ylab(label = "Complaints") +
scale_fill_manual("legend", values = c("Closed" = "green", "Open"="red"))
#State with max complaints
df=as.data.frame(dataset %>% group_by(dataset['State']) %>% tally())
state_withMaxComplaints=df$State[which(df$n==max(df$n))]
#percentage of complaints resolved through internet and calls
levels(factor(dataset$Received.Via))
FilterData=as.data.frame(dataset %>% group_by(dataset['Received.Via'],dataset['TicketStatus']) %>% tally())
filter(data_for_ticket_status,TicketStatus=="Open")
#state with high unresolved tickets
state_withHighestUnresolved=unresolvedStates$State[which(unresolvedStates$n==max(unresolvedStates$n))]
View(FilterData)
filter(data_for_ticket_status,TicketStatus=="Open")
filter(FilterData,TicketStatus=="Open")
filter(FilterData,TicketStatus=="Closed")
FilterData %>% group_by(dataset['Received.Via'])
FilterData %>% group_by(FilterData['Received.Via'])
dataset %>% group_by(dataset['Received.Via']) %>% count()
comp_by=as.data.frame(dataset %>% group_by(dataset['Received.Via']) %>% count())
View(comp_by)
percentage_call=comp_by$n[1]
percentage_call=comp_by$n[which(comp_by['Received.Via']=="Customer Care Call")]
comp_by$n[which(comp_by['Received.Via']=="Customer Care Call")]
closedTotal1=FilterData$n[which(FilterData['Received.Via']=="Customer Care Call" & FilterData['TicketStatus']=='Closed' )]
percentage_call=closedTotal1/total1*100
total1=comp_by$n[which(comp_by['Received.Via']=="Customer Care Call")]
percentage_call=closedTotal1/total1*100
total2=comp_by$n[which(comp_by['Received.Via']=="Internet")]
closedTotal2=FilterData$n[which(FilterData['Received.Via']=="Internet" & FilterData['TicketStatus']=='Closed' )]
percentage_Internet=closedTotal2/total2*100
#state with high unresolved tickets
unresolvedStates=filter(ByState,TicketStatus=="Open")
View(unresolvedStates)
state_withHighestUnresolved=unresolvedStates$State[which(unresolvedStates$n==max(unresolvedStates$n))]
View(FilterData)
View(df)
network_issue<- contains(dataset$Customer.Complaint,match = 'network',ignore.case = T)
internet_issue<- contains(dataset$Customer.Complaint,match = 'internet',ignore.case = T)
dataset$ComplaintType[internet_tickets]<- "Internet"
dataset$ComplaintType[network_tickets]<- "Network"
comcast_data$ComplaintType[-c(network_issue,internet_issue)]="Other Domains"
dataset$ComplaintType[internet_tickets]<- "Internet"
dataset$ComplaintType[network_tickets]<- "Network"
dataset$ComplaintType[-c(network_issue,internet_issue)]="Other Domains"
View(dataset)
dataset$ComplaintType[internet_issue]= "Internet"
dataset$ComplaintType[network_issue]="Network"
dataset$ComplaintType[-c(network_issue,internet_issue)]="Other Domains"
View(dataset)
table(dataset$ComplaintType)
1690+534
FreqOfCompTypes=table(dataset$ComplaintType)
FreqOfCompTypes
#Set the working directory
setwd(choose.dir())
#Import the dataset
dataset=read.csv('D:/Simplilearn/DS with R/Comcast Telecom Complaints data.csv')
#include necessary libraries
library(ggplot2)
library(dplyr)
#Extract date column and preprocess
dates=dataset$Date
class(dates)
#Getting the date format correctly
dates=gsub("/","-",dates)
#Transform to Date type
dates=as.Date(dates,"%d-%m-%Y")
#Verify the orignal date with transformed date
head(dataset$Date)
dates[1:6]
#Updating the date column with actual date
dataset$Date=dates
#Unique days from the dataset
mydates=as.factor(dataset$Date)
#filtering records per day
dataset$Date=as.character(dataset$Date)
perday =dataset %>% group_by(dataset['Date']) %>% tally()
perday=as.data.frame(perday)
perday$complaints=perday$n
#removing n column and keeping complaints column
perday=perday[,-2]
#permonth spilts
library(lubridate)
dataset$Date=dates
permonth =dataset %>% group_by(month=floor_date(Date, "month")) %>% tally()
permonth=as.data.frame(permonth)
permonth$complaints=permonth$n
permonth=permonth[,-2]
#plot the trend of complaints on monthly basis
ggplot(data = permonth, aes(x = month, y = complaints)) +
geom_bar(stat = "identity",fill="red")+
labs(x = "Month",
y = "No.of complaints",
title = "Trend chart for a monthly complaints",
subtitle = "Year 2015")
#MAX per Month complaints
max(permonth$complaints)
#plot the trend of complaints on daily basis
perday$Date=as.Date(perday$Date)
class(perday$d)
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
#MAX Per day complaints
max(perday$complaints)
#creating a new categorical variable
dataset$TicketStatus[which(dataset["Status"]=="Open" | dataset["Status"]=="Pending")]="Open"
dataset$TicketStatus[which(dataset["Status"]=="Closed" | dataset["Status"]=="Solved")]="Closed"
#Adding a col based on complaint types
network_issue<- contains(dataset$Customer.Complaint,match = 'network',ignore.case = T)
internet_issue<- contains(dataset$Customer.Complaint,match = 'internet',ignore.case = T)
dataset$ComplaintType[internet_issue]= "Internet"
dataset$ComplaintType[network_issue]="Network"
dataset$ComplaintType[-c(network_issue,internet_issue)]="Other Domains"
#create a table based on frequency of comp tyypes
FreqOfCompTypes=table(dataset$ComplaintType)
#States spilt
ByState =dataset %>% group_by(dataset['State'],dataset["TicketStatus"]) %>% tally()
#state wise complaints in stacked bar chart
ggplot(ByState,aes(fill=TicketStatus,y=n,x=State))+geom_bar(position = "stack",stat = "identity",width = 0.8)+
labs(title = "State wise complaints with status") +
theme(axis.text.x = element_text(angle = 90)) +
ylab(label = "Complaints") +
scale_fill_manual("legend", values = c("Closed" = "green", "Open"="red"))
#State with max complaints
df=as.data.frame(dataset %>% group_by(dataset['State']) %>% tally())
state_withMaxComplaints=df$State[which(df$n==max(df$n))]
#state with high unresolved tickets
unresolvedStates=filter(ByState,TicketStatus=="Open")
state_withHighestUnresolved=unresolvedStates$State[which(unresolvedStates$n==max(unresolvedStates$n))]
#create required Objects by filtering data
levels(factor(dataset$Received.Via))
FilterData=as.data.frame(dataset %>% group_by(dataset['Received.Via'],dataset['TicketStatus']) %>% tally())
filter(FilterData,TicketStatus=="Closed")
comp_by=as.data.frame(dataset %>% group_by(dataset['Received.Via']) %>% count())
#percentage of complaints resolved through calls
total1=comp_by$n[which(comp_by['Received.Via']=="Customer Care Call")]
closedTotal1=FilterData$n[which(FilterData['Received.Via']=="Customer Care Call" & FilterData['TicketStatus']=='Closed' )]
percentage_call=closedTotal1/total1*100
#percentage of complaints resolved through Internet
total2=comp_by$n[which(comp_by['Received.Via']=="Internet")]
closedTotal2=FilterData$n[which(FilterData['Received.Via']=="Internet" & FilterData['TicketStatus']=='Closed' )]
percentage_Internet=closedTotal2/total2*100
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
#plot the trend of complaints on daily basis
perday$Date=as.character(perday$Date)
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
#plot the trend of complaints on daily basis
perday$Date=as.Date(perday$Date)
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
ggplot(data = perday, aes(x = as.character(perday$Date), y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
Date
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+ scale_x_date(limits = c(Sys.Date() - 7, NA))
ggplot(data = perday, aes(x = Date, y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
#plot the trend of complaints on daily basis
perday$Date=as.character(perday$Date)
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")+scale_x_date(date_labels = "%b %d")
#plot the trend of complaints on daily basis
perday$Date=as.Date(perday$Date)
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015")
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015") +scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+geom_point(size = 1)+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015") +scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+geom_point(size = 0.5)+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015") +scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")
ggplot(data = perday, aes(x =as.POSIXct(Date), y = complaints)) +
geom_line(color="red")+geom_point(size = 0.5)+
theme(axis.text.x = element_text(angle = 90))+
labs(x = "Day",
y = "No.of complaints",
title = "Trend chart for a Daily complaints",
subtitle = "Year 2015") +scale_x_datetime(breaks = "1 weeks",date_labels = "%d/%m")
FreqOfCompTypes
View(dataset)
getwd()
setwd(choose.dir())
getwd()
dataset=read.csv("HospitalCosts.csv")
dataset=read.csv("HospitalCosts.xlsx")
View(dataset)
dataset=read.csv("HospitalCosts.xlsx",header = FALSE)
dataset=read.table("HospitalCosts.xlsx")
View(dataset)
dataset=?read.xlsx()
library(readxl)
dataset=read.xlsx("HospitalCosts.csv")
dataset=read_xlsx(path = "D:/Simplilearn/DS with R/Healthcare Project2/HospitalCosts.xlsx")
View(dataset)
#check for missing values
is.na(dataset)
#check for missing values
class(is.na(dataset))
#check for missing values
check=(is.na(dataset))
View(check)
length(check[check==FALSE])
length(check[check==TRUE])
colnames(dataset)[colSums(is.na(dataset) > 0]
colnames(dataset)[colSums(is.na(dataset)) > 0]
which(check[:,4]==TRUE)
which(check[,4]==TRUE)
help("colSums")
colSums(is.na(dataset))
colSums(is.na(dataset)) > 0
colnames(dataset)[TRUE]
colnames(dataset)[colSums(is.na(dataset)) > 0]
colSums(is.na(dataset)) > 0
class(colSums(is.na(dataset)) > 0))
class(colSums(is.na(dataset)) > 0)
colSums(is.na(dataset)) > 0
colnames(dataset)
colnames(dataset)[colSums(is.na(dataset)) > 0]
#remove that row
na.omit(dataset)
#remove that row
dataset=as.data.frame(na.omit(dataset))
str(dataset)
dataset$AGE=factor(dataset$AGE)
str(dataset)
dataset$FEMALE=factor(dataset$FEMALE)
str(dataset)
dataset=read_xlsx(path = "D:/Simplilearn/DS with R/Healthcare Project2/HospitalCosts.xlsx")
#check for missing values
check=(is.na(dataset))
#Used to find the column of the missing value
colnames(dataset)[colSums(is.na(dataset)) > 0]
which(check[,4]==TRUE)
#remove that row
dataset=as.data.frame(na.omit(dataset))
dataset$FEMALE=factor(dataset$FEMALE)
str(dataset)
summary(dataset)
max(dataset$AGE)
min(dataset$AGE)
